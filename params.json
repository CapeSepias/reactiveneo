{"name":"Reactiveneo","tagline":"Reactive type-safe Scala DSL for Neo4J","body":"# reactiveneo\r\n\r\nReactive typesafe Scala DSL for Neo4j\r\n\r\nThe library enforces strong type checks that imposes some restrictions on query format. Every node and relationship\r\nused in the query needs to be defined and named.\r\nE.g. this kind of query is not supported:\r\n```\r\nMATCH (wallstreet { title:'Wall Street' })<-[r:ACTED_IN]-(actor)\r\nRETURN r\r\n```\r\nInstead you will need to use proper labels for nodes to produce the following query:\r\n```\r\nMATCH (wallstreet:Movie { title:'Wall Street' })<-[r:ACTED_IN]-(actor:Actor)\r\nRETURN r\r\n```\r\n\r\n# Graph modelling\r\n\r\n## Nodes\r\n\r\nDomain model class\r\n```\r\ncase class Person(name: String, age: Int)\r\n```\r\n\r\nReactiveneo node definition\r\n```\r\nimport com.websudos.reactiveneo.dsl._\r\n\r\nclass PersonNode extends Node[PersonNode, Person] {\r\n  \r\n  object name extends StringAttribute with Index\r\n  \r\n  object age extends IntegerAttribute\r\n  \r\n  def fromNode(data: QueryRecord): Person = {\r\n    Person(name[String](data), age[Int](data))  \r\n  }\r\n  \r\n}\r\n```\r\n\r\n## Relationships\r\n\r\n\r\n## Indexes\r\n\r\n\r\n\r\n# Querying\r\n\r\nIn this example all nodes of Person type are returned.\r\n```\r\nscala> val personNodes = matches[Person].return(p => p).execute\r\npersonNodes: Future[Seq[Person]]\r\n```\r\n\r\nYou can also query for specific attributes of a node.\r\n```\r\nscala> val personNames = matches[Person].return(p => p.name).execute\r\npersonNames: Future[Seq[String]]\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}